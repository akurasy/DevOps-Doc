Arguments
arguments are commands we run after a set of command
they are instructions we run after a command
example sh bash.sh start stop restart.
	      $0    $1    $2   $3     argument

echo $# = to know the number of arguments
echo $$ = process ID
ps -ef = to see all running processes
echo $0 = displays the script name
echo $1 = 1st argument
echo $2= 2nd argument. can also be written as echo ${2} and same for other arguments
echo $* = displays all the arguments
echo $@ = displays all the arguments as well
echo $? = gives you the status of the last run command.
if $? =0, it means the last command ran successfully
if $? is greater than zero >0 and between 1 to 127, it means the last command did not execute successfully 

conditonal argument
#if (( $# >= 3 )) = if number of argument is greater than or equals to 3
#if [ $# -gt 3] = if number of argument is greater than or equals to 3
#if [ $# -lt 3] = if number of argument is less than or equals to 3

if (( $# >=3 ))
then
echo '$0': $0
echo '$1': $1
echo '$2': $2
echo '$3': $3
echo '$4': $4
echo '$5': $5
date
else
echo pls pass the 3rd argument 
fi

ARITHMETIC EXPRESSION
expr = used for arithmetic expression
example
expr 6 + 5 = addition
expr 6 - 5 = substraction
expr 6 / 5 = division
expr 6 \* 5 = multiplication

REDIRECTING STANDARD OUTPUT (stdout)
cat /etc/passwd > newuser.txt = redirecting all contents of passwd to a new text file called newuser.txt
cat newuser.txt to see the content
echo this is a boy >> newuser.txt -= will add the comment to the file
echo devop class > newuser.txt = will echo the comment "devop class" to the file newuser.txt and this will
delete the initial content of the file newuser.txt

echo what is 6 + 5: `expr 6 + 5`
echo what is 10 x 2 `expr 6 \* 5`
echo "what is today's date:" `date`
date
```````` sign = back tick

sh scriptname.sh 1>filename to output the correct result of the script to a new file
pls note: this is will not inlcude the error. the standard error shall be treated also.

STANDARD OUTPUT IS ANY COMMAND THAT CAME OUT SUCCESSFULLY


STANDARD ERROR stderr
it is used to collect the error in a script
sh scriptname.sh 2>filename example sh test.sh 2>newfile.txt
1> = for standard output
2> = for standard error


sh scriptname.sh 1>correctfile 2>errorfile = to run both stdout and stderr at the same time to seperate folders

to  redirect both the stdout and stderr to a single file use the command below
sh scriptname.sh >filename 2>&1


DIVERSE WAY OF RUNNING A SCRIPT

echo welcome to bank of NIgeria
echo pls enter your name
read name
echo pls enter the first number
read num1
echo pls enter the second number
read num2
echo thanks $name. the sum of the numbers you entered =
echo `expr $num1 + $num2`

THE ABOVE SCRIPT CAN BE WRITTEN AS FOLLOWS 
echo welcome to bank of Nigeria
read -p "pls enter your name:" name
read -p "please enter the first number:" num1
read -p "please enter the second number:" num2
echo thanks $name, the sum of the numbers you entered = `expr $num1 + $num2`


STANDARD INPUT (STDIN)
echo welcome to bank of Nigeria
echo -n "pls enter your username:"  = output will be written on the same line
read username
echo -n "pls enter your password:"
read -s password
sudo useradd $username
echo $password | sudo passwd $username --stdin
echo thank you $username for completing your registration
THE ABOVE COMMAND IS USED TO PIPE THE PASSWORD INTO THE USERNAME USING STANDARD INPUT METHOD






CONDITIONS
a=5 equals to 
b=4

a==b means a must be equals to b.  comparism, which chceks whether the value of a and b are equal

a!=b not eqauls to
-eq or == means equal to. 
to represent in bash. [ $a -eq $b ] or [ $a == $b ]
-ne or != means not equals to
to represent in bash [ $a -ne $b ] or [ $a != $b ]
-gt or > means greater than
to represent in bash [ $a -gt $b ] or [ $a > $b ]
-lt or < means less than 
to represent in bash [ $a -lt $b ] or [ $a < $b ]
-ge  or >= means greater than or equals to
to represent in bash [ $a -ge $b ] or [ $a >= $b ]
-le or <= means less than or equals to
to represent in bash [ $a -le $b ] or [ $a <= $b ]



IF ELSE STATEMENT
syntax for if else:
if
then
statement or command
else
fi

IF STATEMENT
syntax for if:
if
then
command or statement
fi


BASH EXAMPLE FOR IF SYNTAX
#!/bin/sh
echo welcome to your bank
echo pls enter your pin
read pin
if [ $pin == 1234 ]
echo you have successfully logged in
fi


BASH EXAMPLE FOR IF ELSE SYNTAX
#!/bin/sh
echo welcome to your bank
echo pls enter your pin
read pin
if [ $pin == 1234 ]
then
echo you have successfully logged in
else 
echo you entered a wrong pin. pls re-enter your pin
read pin
echo you have successfully logged in
fi


#!/bin/sh
#compare prices
echo pls enter the price of mango
read price1
echo pls enter the price of orange
read price2
if [ $price1 == $price2 ]
then
echo the price of mango and orange is the same
else
echo the price of mango adn orange is different
fi


LOOPS
b <= 100
b=1
b = `expr $b+1`
echo $b

loop is used in devop for load balancing

example of lopps
1.	for-loops
syntax for c/c++/java use the same loop
for ( initation;condition;increase/decrease )
{ write statement or command }

syntax for bash shell

for (( initation;condition;increase/decrease ))
do
write statement or command
done

EXAMPLE
echo  "for-loops"
for (( a=1;a<=100;a=a+1 ))
#a=a+1 == a++ same thing 
do
echo $a
done

example2
for (( r=1000,r<=10000;r=r+1000 ))
do
echo $r
done

ASSIGNMENT
RIGHT A BASH SCRIPT TO GENERATE THE NUMBERS BETWEEN 100 AND 1 USING FOR-LOOPS

ANSWER
for (( i=100;i>=1;i=i-1 ))
do
echo $i
done 

OR

for (( i=100;i>=1;i-- ))
do
echo $i
done


2.	while-loop
syntax for c/c++/java
initiation
while [ condition ]

sytanx for bash scripting
initiation
while [ condition ]
do
command/statement
done

EXAMPLE1
echo while-loop
i=1
while [ $i -le 5 ]
do
echo $i
i=`expr $i + 1`
done

EXAMPLE2

#performing a load test for a web application
#using while loop[
#record count = rc
rc=5000
while [ $rc -le 50000 ]
do
echo $rc
rc=`expr $rc + 5000`
done


3	MANAGING MULTIPLE CONDITIONS
	SWITCH CASE:
starts with case
ends with esac

case
option1)
command/statement;;
option2)
command/statement;;  each statements ends with doublle ; (;;)
the ;; can be on the same line with statement or next line
option3)
command/statement
;;
esac

EXAMPLE

service https start|enable|restart|stop|status|disable|install|uninstall|shutdown|update

echo switch case demo starts
case $1 in
start)
echo starting sonarqube server
echo sonarqube server started;;
enable)
echo sonarqube server enabling
echo sonarqube server has been enabled;;
restart)
echo sonarqube server is restarting
echo sonarqube server restarted;;
*)
# *) = every other content not in the argument
echo you passed the wrong options
echo "the options are stop | status | disable | install | uninstall | shutdown | update"
esac

test the command with the options
sh case.sh start
sh case.sh enable
sh case.sh restart
sh case.sh disable
e.t.c


ASSIGNMENT
write a switch case script to take values from 1 to 5



FUNCTIONS
FUNCTIONS are used to avoid repetitions or duplications in lines of command

syntax
fn()
{
command/statement
}
fn

greetfn()
{
statement/command
}
greetfn


greetfn()
{
echo "hello welcome engineers"
echo "welcome to the class"
echo "today's date is"
date
}
greetfn


syntax
check()
{
if [ -e /etc/passwd ]
then
echo "please proceed. user exists"
tail -3 /etc/passwd 
touch /home/ec2-user/file.java
else
echo "user does not exist"
fi
}
check

EXPLAIN YOUR EXPERIENCE IN BASH SHELL SCRIPTING

EXPLAIN THE PROBLEM ENCOUNTERED AND HOW YOU RESOLVED IN SCRIPTING
ANSWER: I WAS ABLE TO HANDLE THE ISSUE BY DEBUGGING THE SCRIPT AND 
MOVING ALL ERROR TO A SEPERATE FILE WITH STNDERR BTO RESOLVE THE ISSUE
I RAN THE SCRIPT AND THE EXIT CODE NOT EQUALS TO ZERO (0) !=0
I TROUBLESHOOTED BY THE FOLLOWING WAYS
IDENTIFY AND EXPLAIN THE TYPE OF SCRIPT

HOW TO FIX 
1. I ran in debugging mode sh -x scriptname.sh
2. i contacted my pair for help
3. check google, stack overflow, youtube
4. check with the server vendor echo $BASH_VERSION
5. i moved from opened sourec to enterprise version




