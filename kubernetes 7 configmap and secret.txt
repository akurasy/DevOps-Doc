K8s- CONFIGMAP AND SECRET OCT 9, 2022

What is ConfigMap and Secret? 

-A ConfigMap is an API object used to store NON-confidential data in key-value pair.
e.g email address, house adress

-Pods can consume configMap as environmental variable, can also be attached as command-line arguement or as configuration files in a volume

-ConfigMap are passed or passworded as plain text or clear text


-Secrets are API objects used to store confidential data in key-value pair

How do we create Secrets?

Say a password is dev@123,  how can we pass it as secret?

-we can pass it directly on the command line  in linux, it will be encrypted= echo -n 'devdb@123' | base64

-or use a website to encode (can use to decode too)= base64encode.org


apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-configmap
data:
  db-username: devdb


secrets:

kind: Secret
apiVersion: v1
metadata:
  name: mongo-passwd
type: Opaque
stringData:
  db-password: ZGV2ZGJAMTIz

Note: ConfigMap in K8s can be treated as (Kubernets.io/docs/concepts/configuration/configmap) https://kubernetes.io/docs/concepts/configuration/secret/):

We can then pass the db-username and db-password as defined in the configmap and secret in our mongodb yml.  (replace username and password values in mongo with what is defined in configmap and secret)


apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: mongodbrs
spec:
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      name: mongodbpod
      labels:
        app: mongodb
    spec:
      volumes:
      - name: nfsvol
        nfs:
          server: 172.31.89.83 (get the private IP address)
          path: /mnt/share
      containers:
      - name: mongodb-c
        image: mongo
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: db-username
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: db-password
        volumeMounts:
        - name: nfsvol
          mountPath: /data/db

---
apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  type: ClusterIP
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017
  type: LoadBalancer

---

#ConfigMap

apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-configmap
data:
  db-username: devdb

---

#secrets:

kind: Secret
apiVersion: v1
metadata:
  name: mongo-passwd
type: Opaque
stringData:
  db-password: ZGV2ZGJAMTIz

  kubectl exec <podname> -- pwd



CREATING A CONFIGMAP AND SCRET FOR TOMCAT-USER (KINDLY NOTE THIS ISSUE NOT RESOLVED)

goto the pod running on tomcat by running the command 
kubectl exec <podname> -- pwd
keep listing to reveal the tomcat.xml file and cat the file

cat usr/local/tomcat/conf/tomcat-users.xml


copy the content from the file:

<?xml version="1.0" encoding='utf-8'?>
<tomcat-users xmlns= ----------------- (copy the comment)
below it, paste the command
<user username="tomcat" password="tomcat" roles="admin-gui,manager-gui"/>
</tomcat-users>

now paste in our config yaml 

--------------------------------------------------------------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-configmap
data:
  tomcat-users.xml:
<?xml version="1.0" encoding='utf-8'?>
<tomcat-users xmlns= ----------------- (copy the comment and paste)
  <user username="tomcat" password="tomcat" roles="admin-gui,manager-gui"/>
  </tomcat-users>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: springapp
  namespace: dev
spec:
  selector:
    matchLabels:
      app: springapp
  replicas: 3
  template:
    metadata:
      name: springapp
      labels:
        app: springapp
    spec:
      volumes:
      - name: tomcat-userconf
      configMap:
        items:
        - key: "tomcat-users.xml"
          path: "tomcat-users.xml"
      containers:
      - name: springapp
        image: acadalearning/java-web-app
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: tomcat-userconf
        mountPath: usr/local/tomcat/conf/tomcat-users.xml
        subPath: "tomcat-users.xml"


you can copy both command for tomcat config and your application and run in a single file

















